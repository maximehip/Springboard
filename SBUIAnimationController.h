//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "BSTransaction.h"

#import "SBUIAnimationControllerCoordinating.h"
#import "SBUIAnimationStepping.h"
#import "SBViewControllerTransitionContextDelegate.h"
#import "UIViewControllerInteractiveTransitioning.h"

@class BSAnimationSettings, BSBlockTransaction, NSMutableSet, NSSet, NSString, SBAnimationStepper, SBViewControllerTransitionContext, SBWorkspaceApplication, UIView, UIWindow;

@interface SBUIAnimationController : BSTransaction <UIViewControllerInteractiveTransitioning, SBViewControllerTransitionContextDelegate, SBUIAnimationStepping, SBUIAnimationControllerCoordinating>
{
    id <SBUIAnimationControllerTransitionContextProvider> _transitionContextProvider;
    BSBlockTransaction *_animationTransaction;
    BSBlockTransaction *_notifyObserversTransaction;
    BSBlockTransaction *_cleanupTransaction;
    NSSet *_progressDependencies;
    NSSet *_waitForActivationDependencies;
    NSMutableSet *_coordinatingChildRelationships;
    NSMutableSet *_steppedCoordinatingChildAnimations;
    SBAnimationStepper *_stepper;
    UIWindow *_transitionWindow;
    UIView *_transitionContainer;
    int _animationState;
    BOOL _didPostBeginAnimationNotification;
    BOOL _didNotifyObserversOfCompletion;
    BOOL _needsCATransactionActivate;
    SBViewControllerTransitionContext *_transition;
    CDUnknownBlockType _animationTransactionCompletion;
}

@property(nonatomic) BOOL needsCATransactionActivate; // @synthesize needsCATransactionActivate=_needsCATransactionActivate;
@property(copy, nonatomic) CDUnknownBlockType animationTransactionCompletion; // @synthesize animationTransactionCompletion=_animationTransactionCompletion;
@property(retain, nonatomic) SBViewControllerTransitionContext *transition; // @synthesize transition=_transition;
@property(readonly, nonatomic) UIView *containerView; // @synthesize containerView=_transitionContainer;
@property(readonly, nonatomic) BSTransaction *cleanupTransaction; // @synthesize cleanupTransaction=_cleanupTransaction;
@property(readonly, nonatomic) BSTransaction *notifyObserversTransaction; // @synthesize notifyObserversTransaction=_notifyObserversTransaction;
@property(readonly, nonatomic) BSTransaction *animationTransaction; // @synthesize animationTransaction=_animationTransaction;
@property(retain, nonatomic) id <SBUIAnimationControllerTransitionContextProvider> transitionContextProvider; // @synthesize transitionContextProvider=_transitionContextProvider;
- (void).cxx_destruct;
- (void)transitionDidFinish:(id)arg1;
- (id)coordinatingAnimationControllers;
- (void)startInteractiveTransition:(id)arg1;
- (void)finishSteppingBackwardToStart;
- (void)finishSteppingForwardToEnd;
@property(nonatomic) float stepPercentage;
@property(readonly, nonatomic, getter=isStepped) BOOL stepped;
- (void)__cleanupAnimation;
- (BOOL)__animationShouldStart;
- (void)__reportAnimationCompletion;
- (void)__noteAnimationDidTerminate;
- (void)_noteAnimationDidFail;
- (void)_noteAnimationDidFinish;
- (void)_noteAnimationDidRevealApplication;
- (void)_notifyObserversOfAnimationCompletion;
- (id)_viewsForAnimationStepping;
- (BOOL)_shouldDismissBanner;
- (id)_transitionAnimator;
- (void)_cleanupAnimation;
- (void)_abortAnimation;
- (void)_startAnimation;
- (void)_applicationDependencyStateChanged;
- (BOOL)_waitsForApplicationActivationIfNecessary;
- (void)_prepareAnimation;
- (void)_willBeginWaitingForStartDependencies;
- (void)_setHidden:(BOOL)arg1;
- (id)_animationProgressDependencies;
- (id)_animationIdentifier;
- (BOOL)_willAnimate;
- (void)_addDebugLogger:(id)arg1;
- (void)_willComplete;
- (void)_begin;
- (BOOL)_canBeInterrupted;
- (id)__alertItemsController;
- (void)_enumerateCoordinatingAnimationsWithSchedulingPolicy:(unsigned int)arg1 block:(CDUnknownBlockType)arg2;
- (void)_enumerateCoordinatingAnimationsWithBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateCoordinatingChildRelationshipsWithBlock:(CDUnknownBlockType)arg1;
- (void)enableSteppingWithAnimationSettings:(id)arg1;
- (BOOL)isReasonableMomentToInterrupt;
- (BOOL)isFinishedAnimating;
- (BOOL)waitingToStart;
- (BOOL)__wantsInitialProgressStateChange;
- (void)_willSetupStartDependencies;
- (id)__waitForAppActivationTransactionForApplication:(id)arg1;
- (void)_applicationActivationStateDidChange;
- (void)__abortAnimation;
- (void)__startAnimation;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)stopDelayingAnimationForTransaction:(id)arg1;
- (void)delayAnimationUntilTransactionFinishes:(id)arg1;
- (void)stopDelayingCleanupForTransaction:(id)arg1;
- (void)delayCleanupUntilTransactionFinishes:(id)arg1;
- (void)addSteppedCoordinatingChildAnimation:(id)arg1;
- (void)addCoordinatingChildTransaction:(id)arg1 withSchedulingPolicy:(unsigned int)arg2;
@property(readonly, nonatomic) BSAnimationSettings *animationSettings;
@property(readonly, nonatomic) id <SBViewControllerTransitionCoordinator> transitionCoordinator;
@property(readonly, nonatomic, getter=isInteractive) BOOL interactive;
@property(readonly, nonatomic) BOOL transitionWasRestarted;
@property(readonly, nonatomic) BOOL transitionWasCancelled;
- (void)restartTransition;
- (void)cancelTransition;
@property(readonly, nonatomic) BOOL transitionSupportsRestarting;
@property(readonly, nonatomic) BOOL transitionSupportsCancelling;
- (void)_setAnimationState:(int)arg1;
- (BOOL)_isNullAnimation;
- (BOOL)animating;
- (int)_animationState;
@property(readonly, nonatomic) SBWorkspaceApplication *deactivatingApp;
@property(readonly, nonatomic) SBWorkspaceApplication *activatingApp;
@property(readonly, copy, nonatomic) NSSet *deactivatingApps;
@property(readonly, copy, nonatomic) NSSet *activatingApps;
- (void)dealloc;
- (id)initWithTransitionContextProvider:(id)arg1;
- (id)init;
- (id)_getTransitionWindow;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;
@property(readonly, nonatomic) BOOL wantsInteractiveStart;

@end

